what-is-a-race-condition?

A race condition is an undesirable situation that occurs when two or more process can access and change the shared data at the same time.
It occurred because there were conflicting accesses to a resource . Critical section problem may cause race condition. 
To solve critical condition among the process we have take out only one process at a time which execute the critical section.

A race condition is an undesirable situation that occurs when a device or system attempts to perform two or more operations at the same time, 
but because of the nature of the device or system, the operations must be done in the proper sequence in order to be done correctly.

In computer memory or storage, a race condition may occur if commands to read and write a large amount of data are received at almost the same instant, 
and the machine attempts to overwrite some or all of the old data while that old data is still being read. The result may be one or more of the following: 
a computer crash, an "illegal operation," notification and shutdown of the program, errors reading the old data, or errors writing the new data.

A race condition is a situation on concurrent programming where two concurrent threads or processes and 
the resulting final state depends on who gets the resource first.

What is a Race Condition?
You are planning to go to a movie at 5 pm. You inquire about the availability of the tickets at 4 pm. The representative says that they are available. 
You relax and reach the ticket window 5 minutes before the show. I'm sure you can guess what happens: it's a full house. The problem here was in the 
duration between the check and the action. You inquired at 4 and acted at 5. In the meantime, someone else grabbed the tickets. 
That's a race condition - specifically a "check-then-act" scenario of race conditions.

There is an important technical difference between race conditions and data races:
data race:
----------
A data race occurs when 2 instructions access the same memory location, at least one of these accesses is a write and there is no happens 
before ordering among these accesses. Now what constitutes a happens before ordering is subject to a lot of debate, but in general ulock-lock pairs 
on the same lock variable and wait-signal pairs on the same condition variable induce a happens-before order.

race condition:
---------------
A race condition is a semantic error. It is a flaw that occurs in the timing or the ordering of events that leads to erroneous program behavior.

Many race conditions can be (and in fact are) caused by data races, but this is not necessary. As a matter of fact, data races and 
race conditions are neither the necessary, nor the sufficient condition for one another.

Given that race conditions are semantic bugs, there is no general way of detecting them. This is because there is no way of having an automated oracle 
that can distinguish correct vs. incorrect program behavior in the general case. Race detection is an undecidable problem.

On the other hand, data races have a precise definition that does not necessarily relate to correctness, and therefore one can detect them. 
There are many flavors of data race detectors as below:
	1. static/dynamic data race detection, 
	2. lockset-based data race detection, 
	3. happens-before based data race detection, 
	4. hybrid data race detection. 
	
	A state of the art 'dynamic data race detector' is 'ThreadSanitizer' which works very well in practice.
	
Handling data races in general requires some programming discipline to induce happens-before edges between accesses to shared data 
(either during development, or once they are detected using the above mentioned tools). this can be done through locks, condition variables, semaphores, etc. 
However, one can also employ different programming paradigms like message passing (instead of shared memory) that avoid data races by construction.

=======================================================================================

Race conditions occur in multi-threaded applications or multi-process systems. A race condition, at its most basic, is anything that makes the assumption 
that two things not in the same thread or process will happen in a particular order, without taking steps to ensure that they do. This happens commonly 
when two threads are passing messages by setting and checking member variables of a class both can access. There's almost always a race condition when 
one thread calls sleep to give another thread time to finish a task (unless that sleep is in a loop, with some checking mechanism).

Tools for preventing race conditions are dependent on the language and OS, but some comon ones are mutexes, critical sections, and signals. 
Mutexes are good when you want to make sure you're the only one doing something. Signals are good when you want to make sure someone else has finished 
doing something. Minimizing shared resources can also help prevent unexpected behaviors.

Detecting race conditions can be difficult, but there are a couple signs. Code which relies heavily on sleeps is prone to race conditions, so first check 
for calls to sleep in the affected code. Adding particularly long sleeps can also be used for debugging to try and force a particular order of events. 
This can be useful for reproducing the behavior, seeing if you can make it disappear by changing the timing of things, and for testing solutions put in place. 
The sleeps should be removed after debugging.

The signature sign that one has a race condition though, is if there's an issue that only occurs intermittently on some machines. 
Common bugs would be crashes and deadlocks. With logging, you should be able to find the affected area and work back from there.

=======================================================================================

A race condition occurs when two or more threads can access shared data and they try to change it at the same time. 
Because the thread scheduling algorithm can swap between threads at any time, you don't know the order in which the threads will attempt 
to access the shared data. Therefore, the result of the change in data is dependent on the thread scheduling algorithm, 
i.e. both threads are "racing" to access/change the data.

Problems often occur when one thread does a "check-then-act" (e.g. "check" if the value is X, then "act" to do something that depends on the value being X) 
and another thread does something to the value in between the "check" and the "act". E.g:

	if (x == 5) { // The "Check"
		y = x * 2; // The "Act"
		// NOTE: If another thread changed x in between "if (x == 5)" and "y = x * 2" above, y will not be equal to 10.
	}
	
The point being, y could be 10, or it could be anything, depending on whether another thread changed x in between the check and act. 
You have no real way of knowing.

Solution:
---------
In order to prevent race conditions from occurring, you would typically put a lock around the shared data to ensure only one thread can access the data at a time. 
This would mean something like this:

	// Obtain lock for x
	if (x == 5) {
		y = x * 2; // Now, nothing can change x until the lock is released. Therefore y = 10
	}
	// release lock for x
	
=============================================================================================

A "race condition" exists when multithreaded (or otherwise parallel) code that would access a shared resource could do so in such a way 
as to cause unexpected results.
Take this example:

	for ( int i = 0; i < 10000000; i++ ) {
		x = x + 1; 
	}
	
If you had 5 threads executing this code at once, the value of x WOULD NOT end up being 50,000,000. It would in fact vary with each run.

This is because, in order for each thread to increment the value of x, they have to do the following: (simplified, obviously)
	Retrieve the value of x
	Add 1 to this value
	Store this value to x
	
Any thread can be at any step in this process at any time, and they can step on each other when a shared resource is involved. 
The state of x can be changed by another thread during the time between x is being read and when it is written back.

Solution:
---------
Race conditions can be avoided by employing some sort of locking mechanism before the code that accesses the shared resource:

	for ( int i = 0; i < 10000000; i++ ) {
		//lock x
		x = x + 1; 
		//unlock x
	}
	
Here, the answer comes out as 50,000,000 every time.

For more on locking, search for: mutex, semaphore, critical section, shared resource.

===============================================================================================

A race condition is a kind of bug, that happens only with certain temporal conditions.
Example: Imagine you have two threads, A and B.

In Thread A:
------------
if( object.a != 0 )
    object.avg = total / object.a
	
In Thread B:
------------
object.a = 0

If thread A is preempted just after having check that object.a is not null, B will do a = 0, and when thread A will gain the processor, 
it will do a "divide by zero".

This bug only happen when thread A is preempted just after the if statement, it's very rare, but it can happen.

================================================================================================

Race condition is not only related with software but also related with hardware too. Actually the term was initially coined by the hardware industry.

Software industry took this term without modification, which makes it a little bit difficult to understand.

You need to do some replacement to map it to the software world:
	1. "two signals" => "two threads"/"two processes"
	2. "influence the output" => "influence some shared state"
	
So race condition in software industry means "two threads"/"two processes" racing each other to "influence some shared state", and the final result 
of the shared state will depend on some subtle timing difference, which could be caused by some specific thread/process launching order, 
thread/process scheduling, etc.

Refere the Digram file for your reference.
================================================================================================