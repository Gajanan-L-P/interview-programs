Functors in C++:
---------------
- Consider a function that takes only one argument. However, while calling this function we have a lot more information that we would like 
  to pass to this function, but we cannot as it accepts only one parameter. What can be done?
- One obvious answer might be global variables. However, good coding practices do not advocate the use of global variables and say they must be used 
  only when there is no other alternative.
  
- Functors are objects that can be treated as though they are a function or function pointer. 
  Functors are most commonly used along with STLs in a scenario like following:
  
	#include<iostream>
	#include<algorithm>
	using namespace std;
	int increment(int x) { return x+1; } 
	int main() { 
		int arr[] = {1, 2, 3, 4, 5}; 
		int n = sizeof(arr)/sizeof(arr[0]); 
		// Apply increment to all elements of arr[] and store the modified elements back in arr[] 
		transform(arr, arr+n, arr, increment); 
		std::cout << "Transformed array: ";
		for (int i=0; i<n; i++) 
			cout << arr[i] << " "; 
		return 0; 
	} 
	// OUTPUT: Transformed array: 2 3 4 5 6
	
	- This code snippet adds only one value to the contents of the arr[]. Now suppose, that we want to add 5 to contents of arr[].
	
	- See whatâ€™s happening? As transform requires a unary function(a function taking only one argument) for an array, 
	  we cannot pass a number to increment(). And this would, in effect, make us write several different functions to add each number. 
	  What a mess. This is where functors come into use.

	- A functor (or function object) is a C++ class that acts like a function. 
	  Functors are called using the same old function call syntax. 
	  To create a functor, we create a object that overloads the operator().
		The line  : MyFunctor(10); 
		Is same as: MyFunctor.operator()(10);
		
		#include<iostream>
		#include<algorithm>
		using namespace std;
		// A Functor : Here increment is a functor which is a c++ class that acts as a function.
		class increment {
				int num; 
			public: 
				increment(int n) : num(n) {  } 
			// This operator overloading enables calling operator function () on objects of increment 
			int operator () (int arr_num) const { 
				return num + arr_num; 
			} 
		}; 

		int main() { 
			int arr[] = {1, 2, 3, 4, 5}; 
			int n = sizeof(arr)/sizeof(arr[0]); 
			int to_add = 5;
			// Apply increment to all elements of arr[] and store the modified elements back in arr[] 
			transform(arr, arr+n, arr, increment(to_add)); 
			std::cout << "Transformed array: ";
			for (int i=0; i<n; i++) 
				cout << arr[i] << " "; 
			return 0; 
		}
		//OUTPUT: Transformed array: 6 7 8 9 10
		
		- The line:	transform(arr, arr+n, arr, increment(to_add));
		  is the same as writing below two lines,
			increment obj(to_add);  // Creating object of increment
			transform(arr, arr+n, arr, obj);  // Calling () on object
			
		- Thus, an object obj is created that overloads the operator(). Hence, functors can be used effectively in conjunction with C++ STLs.
		
		
=============================


Functors:
---------
- A functor is an object that can be called like a function. 
- In other words, a functor is an object that overloads the function call operator: operator(). 
  For example, we can define square and cube as functions:
	double square(double x) { return x * x; }
	double cube(double x) { return x * x * x; }
	
  Or, as functor classes:

	class Square {
		public:
			double operator()(double x) { return x * x; }
	};

	class Cube {
		public:
			double operator()(double x) { return x * x * x; }
	};
	
- We can call functors or functions, it doesn't matter:
	void testFunctors()	{
		Square f; // f is a functor
		Cube g; // g is a functor
		cout << f(3) << '\n';
		cout << g(3) << '\n';
		cout << f(g(2)) << '\n';

		cout << square(3) << '\n';
		cout << cube(3) << '\n';
		cout << square(cube(2)) << '\n';
	}

	Here's the output produced:
		9
		27
		64
		9
		27
		64
		
- The standard C++ library even provides some functor classes in the <functional> header file:

	void testFunctors2() {
		// f, g, h, & k are functors
		multiplies<double> f;
		plus<string> h; // concatonation functor
		plus<double> g;
		less<int> k;
		cout << f(3, 4) << '\n';
		cout << g(3, 4) << '\n';
		cout << h("bat", "man") << '\n';
		cout << k(2, 9) << '\n';
	}

	Here's the output produced:
		12
		7
		batman
		1
		
- Unlike functions, functors can provide additional services:

	class Line // represents a line in the plane
	{
			double slope, yIntercept;
		public:
			void plot(Graphics& g) const;
			double xIntercept() const;
			bool parallel(const Line& l) const;
			bool perpendicular(const Line& l) const;
			double operator()(double x)	{
			return slope * x + yIntercept;
			}
	};