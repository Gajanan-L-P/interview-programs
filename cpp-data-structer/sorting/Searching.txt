/*
Linear Search
Problem: Given an array arr[] of n elements, write a function to search a given element x in arr[].

Examples :
Input : arr[] = {10, 20, 80, 30, 60, 50, 
                     110, 100, 130, 170}
          x = 110;
Output : 6
Element x is present at index 6

Input : arr[] = {10, 20, 80, 30, 60, 50, 
                     110, 100, 130, 170}
           x = 175;
Output : -1
Element x is not present in arr[].

A simple approach is to do linear search, i.e

Start from the leftmost element of arr[] and one by one compare x with each element of arr[]
If x matches with an element, return the index.
If x doesnâ€™t match with any of elements, return -1.

The time complexity of above algorithm is O(n).
Linear search is rarely used practically because other search algorithms such as the binary search algorithm and hash tables allow 
significantly faster searching comparison to Linear search.
*/

#include<stdio.h>
int LinearSearch(int arr[], int size, int num){
    int index = -1;
    for(int i =0; i < size; i++){
	    if(arr[i] == num){
		    index = i;
			break;
		}
	}
	return index;
}

void display(int arr[], int size){
    for(int i = 0; i <size; i++){
        printf("%d ", arr[i]);      
    }
    printf("\n");
}

int main()
{
    int arr1[] = {10, 80, 30, 90, 40, 50, 70};
    int size1 = sizeof(arr1) / sizeof(arr1[0]);
    int index = LinearSearch(arr1, size1, 20);
    display(arr1, size1);
	if(index >= 0)
	    printf("\n Elemnt found at index arr[ %d ] : %d\n", index, arr1[index]);
	else
	    printf("\n Elemnt not found.\n");
	return 0;
}

/*
Ques:- Given a sorted array arr[] of n elements, write a function to search a given element x in arr[].

Ans:- 1. A simple approach is to do linear search.The time complexity of above algorithm is O(n). 

      2. Binary Search: Search a sorted array by repeatedly dividing the search interval in half. Begin with an interval covering the whole array. 
	     If the value of the search key is less than the item in the middle of the interval, narrow the interval to the lower half. 
		 Otherwise narrow it to the upper half. Repeatedly check until the value is found or the interval is empty.
		 The idea of binary search is to use the information that the array is sorted and reduce the time complexity to O(Log n).

We basically ignore half of the elements just after one comparison.
1. Compare x with the middle element.
2. If x matches with middle element, we return the mid index.
3. Else If x is greater than the mid element, then x can only lie in right half subarray after the mid element. So we recur for right half.
4. Else (x is smaller) recur for the left half.
*/


#include<stdio.h>
int LinearSearch(int arr[], int size, int num){
    int index = -1;
    for(int i =0; i < size; i++){
	    if(arr[i] == num){
		    index = i;
			break;
		}
	}
	return index;
}

/*
Recursive program to linearly search an element in a given array
Given an unsorted array and an element x, search x in given array. Write recursive C code for this. If element is not present, return -1.
Approach : The idea is to compare x with first element in arr[]. 
           If element is found at first position, return it. Else recur for remaining array and x.
*/
int LinearSearchRecursive(int arr[], int low, int high, int num){
    if(low > high)
	    return -1;
	if(arr[low] == num)
	    return low;
    else 
	    return LinearSearchRecursive(arr, low + 1, high, num);
}

void display(int arr[], int size){
    for(int i = 0; i <size; i++){
        printf("%d ", arr[i]);      
    }
    printf("\n");
}
int BinarySearchRecursive(int arr[], int low, int high, int num) {
    if(low <= high){
	    int midIndex = (low + high)/2;
		if(arr[midIndex] == num)
		    return midIndex;
		else if(arr[midIndex] > num)
		    return BinarySearchRecursive(arr, low, midIndex - 1, num);
		else
		    return BinarySearchRecursive(arr, midIndex +  1, high, num);
	}
	return -1;
}

int BinarySearchIterative(int arr[], int low, int high, int num) {
    while(low <= high){
	    int midIndex = (low + high)/2;
		if(arr[midIndex] == num)
		    return midIndex;
		else if(arr[midIndex] > num)
		    high = midIndex - 1;
		else
		    low = midIndex +  1;
	}
	return -1;
}

int main()
{
    int arr1[] = {10, 20, 30, 40, 50, 60, 70};
    int size1 = sizeof(arr1) / sizeof(arr1[0]);
    int num = 25;
	display(arr1, size1);
	
    int index = LinearSearch(arr1, size1, num);
	if(index >= 0)
	    printf("\n LinearSearch L-> Elemnt found at index arr[ %d ] : %d\n", index, arr1[index]);
	else
	    printf("\n LinearSearch L-> Elemnt not found.\n");
		
	int index1 = LinearSearchRecursive(arr1, 0, size1-1, num);
	if(index1 >= 0)
	    printf("\n LinearSearch R-> Elemnt found at index arr[ %d ] : %d\n", index1, arr1[index1]);
	else
	    printf("\n LinearSearch R-> Elemnt not found.\n");
	    
	int index2 = BinarySearchRecursive(arr1, 0, size1-1, num);
	if(index2 >= 0)
	    printf("\n BinarySearch R-> Elemnt found at index arr[ %d ] : %d\n", index2, arr1[index2]);
	else
	    printf("\n BinarySearch R-> Elemnt not found.\n");
		
	int index3 = BinarySearchIterative(arr1, 0, size1-1, num);
	if(index3 >= 0)
	    printf("\n BinarySearch I-> Elemnt found at index arr[ %d ] : %d\n", index3, arr1[index3]);
	else
	    printf("\n BinarySearch I-> Elemnt not found.\n");
	return 0;
}

/*
Time Complexity: The time complexity of Binary Search can be written as
    T(n) = T(n/2) + c 
The above recurrence can be solved either using Recurrence Tree method or Master method. It falls in case II of Master Method and 
solution of the recurrence is Theta(Logn).

Auxiliary Space: O(1) in case of iterative implementation.  
                 O(Logn) recursion call stack space, In case of recursive implementation.

Algorithmic Paradigm: Decrease and Conquer.
*/