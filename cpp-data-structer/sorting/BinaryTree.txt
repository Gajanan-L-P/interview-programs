/*
Binary Tree is a special datastructure used for data storage purposes. 
A binary tree has a special condition that each node can have a maximum of two children. 
A binary tree has the benefits of both an ordered array and a linked list as search is as quick as in a sorted array and 
insertion or deletion operation are as fast as in linked list.

Here A is Root Node.

    A        <---- Level 0
   / \
  /   \ 
  B    C     <---- Level 1
 / \  / \ 
D  E  F G    <---- Level 2 and Leaf Node as well

Here (F,G) -> are Siblings

Here bewlow is subtree:
--------
|  B   | <--- Parent Node
| / \  |
| D  E <-- Child Node
-------|
   /\
   ||
   SubTree
   
Important Terms :- Following are the important terms with respect to tree.

 1. Path − Path refers to the sequence of nodes along the edges of a tree.
 2. Root − The node at the top of the tree is called root. There is only one root per tree and one path from the root node to any node.
 3. Parent − Any node except the root node has one edge upward to a node called parent.
 4. Child − The node below a given node connected by its edge downward is called its child node.
 5. Leaf − The node which does not have any child node is called the leaf node.
 6. Subtree − Subtree represents the descendants of a node.
 7. Visiting − Visiting refers to checking the value of a node when control is on the node.
 8. Traversing − Traversing means passing through nodes in a specific order.
 9. Levels − Level of a node represents the generation of a node. If the root node is at level 0, then its next child node is at level 1, 
    its grandchild is at level 2, and so on.
 10.keys − Key represents a value of a node based on which a search operation is to be carried out for a node.
 
Binary Search Tree Representation:-
 Binary Search tree exhibits a special behavior. 
 A node's left child must have a value less than its parent's value and the node's right child must have a value greater than its parent value.

 Binary Search Tree, is a node-based binary tree data structure which has the following properties:
    1. The left subtree of a node contains only nodes with keys lesser than the node’s key.
    2. The right subtree of a node contains only nodes with keys greater than the node’s key.
    3. The left and right subtree each must also be a binary search tree.
    4. There must be no duplicate nodes.
	
Some Interesting Facts:-
 1. Inorder traversal of BST always produces sorted output.
 2. We can construct a BST with only Preorder or Postorder or Level Order traversal. 
    Note that we can always get inorder traversal by sorting the only given traversal.

BST Basic Operations:-
-----------------------
The basic operations that can be performed on a binary search tree data structure, are the following −
 1. Insert − Inserts an element in a tree/create a tree.
 2. Search − Searches an element in a tree.
 3. Preorder Traversal − Traverses a tree in a pre-order manner.
 4. Inorder Traversal − Traverses a tree in an in-order manner.
 5. Postorder Traversal − Traverses a tree in a post-order manner.

1) Node to be deleted is leaf: Simply remove from the tree.

              50                            50
           /     \         delete(20)      /   \
          30      70       --------->    30     70 
         /  \    /  \                     \    /  \ 
       20   40  60   80                   40  60   80
2) Node to be deleted has only one child: Copy the child to the node and delete the child

              50                            50
           /     \         delete(30)      /   \
          30      70       --------->    40     70 
            \    /  \                          /  \ 
            40  60   80                       60   80
3) Node to be deleted has two children: Find inorder successor of the node. 
   Copy contents of the inorder successor to the node and delete the inorder successor. Note that inorder predecessor can also be used.

              50                            60
           /     \         delete(50)      /   \
          40      70       --------->    40    70 
                 /  \                            \ 
                60   80                           80
The important thing to note is, inorder successor is needed only when right child is not empty. 
In this particular case, inorder successor can be obtained by finding the minimum value in right child of the node.

*/

//Tree Node - It has a data part and references to its left and right child nodes.
struct node {
   int data;   
   struct node *leftChild;
   struct node *rightChild;
};


void insert(int data) {
   struct node *tempNode = (struct node*) malloc(sizeof(struct node));
   struct node *current;
   struct node *parent;

   tempNode->data = data;
   tempNode->leftChild = NULL;
   tempNode->rightChild = NULL;

   //if tree is empty, create root node
   if(root == NULL) {
      root = tempNode;
   } else {
      current = root;
      parent  = NULL;

      while(1) {                
         parent = current;

         if(data < parent->data) {
            current = current->leftChild;                
            
            if(current == NULL) {  //insert to the left
               parent->leftChild = tempNode;
               return;
            }
         }
         else {
            current = current->rightChild;
            
            if(current == NULL) {  //insert to the right
               parent->rightChild = tempNode;
               return;
            }
         }
      }            
   }
}

struct node* search(int data) {
   struct node *current = root;
   printf("Visiting elements: ");

   while(current->data != data) {
      if(current != NULL)
      printf("%d ",current->data); 
      
      //go to left tree

      if(current->data > data) {
         current = current->leftChild;
      }
      //else go to right tree
      else {                
         current = current->rightChild;
      }

      //not found
      if(current == NULL) {
         return NULL;
      }

      return current;
   }  
}

/*

     5        <---- Level 0
    / \
   /   \ 
  3     7     <---- Level 1
 / \   / \ 
2  4   6  8   <---- Level 2  

In-order Traversal:-
---------------------
 In this traversal method, the left subtree is visited first, then the root and later the right sub-tree. 
 We should always remember that every node may represent a subtree itself.

 If a binary tree is traversed in-order, the output will produce sorted key values in an ascending order.
 
 OUTPUT:- 2 -> 3 -> 4 -> 5 -> 6 -> 7 -> 8
Algorithm
Until all nodes are traversed −
Step 1 − Recursively traverse left subtree.
Step 2 − Visit root node.
Step 3 − Recursively traverse right subtree.

Pre-order Traversal:-
---------------------
 In this traversal method, the root node is visited first, then the left subtree and finally the right subtree.
 The process goes on until all the nodes are visited. 
 
 OUTPUT:- 5 -> 3 -> 2 -> 4 -> 7 -> 6 -> 8
Algorithm
Until all nodes are traversed −
Step 1 − Visit root node.
Step 2 − Recursively traverse left subtree.
Step 3 − Recursively traverse right subtree.

Post-order Traversal:-
----------------------
 In this traversal method, the root node is visited last, hence the name. 
 First we traverse the left subtree, then the right subtree and finally the root node.

 OUTPUT:- 2 -> 4 -> 3 -> 6 -> 8 -> 7 -> 5
Algorithm
Until all nodes are traversed −
Step 1 − Recursively traverse left subtree.
Step 2 − Recursively traverse right subtree.
Step 3 − Visit root node.

*/

#include<stdio.h>
#include<stdlib.h>

struct node
{
    int key;
    struct node *left, *right;
};
  
// A utility function to create a new BST node
struct node *newNode(int item)
{
    struct node *temp =  (struct node *)malloc(sizeof(struct node));
    temp->key = item;
    temp->left = temp->right = NULL;
    return temp;
}

void pre_order_traversal(struct node* root) {
   if(root != NULL) {
      printf("%d ",root->key);
      pre_order_traversal(root->left);
      pre_order_traversal(root->right);
   }
}

void inorder_traversal(struct node* root) {
   if(root != NULL) {
      inorder_traversal(root->left);
      printf("%d ",root->key);          
      inorder_traversal(root->right);
   }
}

void post_order_traversal(struct node* root) {
   if(root != NULL) {
      post_order_traversal(root->left);
      post_order_traversal(root->right);
      printf("%d ", root->key);
   }
}

/* A utility function to insert a new node with given key in BST */
struct node* insert(struct node* node, int key)
{
    /* If the tree is empty, return a new node */
    if (node == NULL) return newNode(key);
 
    /* Otherwise, recur down the tree */
    if (key < node->key)
        node->left  = insert(node->left, key);
    else if (key > node->key)
        node->right = insert(node->right, key);   
 
    /* return the (unchanged) node pointer */
    return node;
}

// C function to search a given key in a given BST
struct node* search(struct node* root, int key)
{
    // Base Cases: root is null or key is present at root
    if (root == NULL || root->key == key)
       return root;
    
    // Key is greater than root's key
    if (root->key < key)
       return search(root->right, key);
 
    // Key is smaller than root's key
    return search(root->left, key);
}

/* Given a non-empty binary search tree, return the maximum data value found in that tree. 
   Note that the entire tree does not need to be searched. */
int maxValue(struct node* node) {
  struct node* current = node;
 
  /* loop down to find the leftmost leaf */
  while (current->right != NULL) {
    current = current->right;
  }
  return(current->data);
}

/* Given a non-empty binary search tree, return the node with minimum key value found in that tree. 
   Note that the entire tree does not need to be searched. */
struct node * minValueNode(struct node* node)
{
    struct node* current = node;
 
    /* loop down to find the leftmost leaf */
    while (current->left != NULL)
        current = current->left;
 
    return current;
}

/* Given a binary search tree and a key, this function deletes the key and returns the new root */
struct node* deleteNode(struct node* root, int key)
{
    // base case
    if (root == NULL) return root;
 
    if (key < root->key)  // If the key to be deleted is smaller than the root's key, then it lies in left subtree
        root->left = deleteNode(root->left, key);
 
    else if (key > root->key)   // If the key to be deleted is greater than the root's key, then it lies in right subtree
        root->right = deleteNode(root->right, key);
    else   // if key is same as root's key, then This is the node to be deleted
    {
        if (root->left == NULL)   // node with only one child or no child
        {
            struct node *temp = root->right;
            free(root);
            return temp;
        }
        else if (root->right == NULL)
        {
            struct node *temp = root->left;
            free(root);
            return temp;
        }
 
        // node with two children: Get the inorder successor (smallest in the right subtree)
        struct node* temp = minValueNode(root->right);
 
        // Copy the inorder successor's content to this node
        root->key = temp->key;
 
        // Delete the inorder successor
        root->right = deleteNode(root->right, temp->key);
    }
    return root;
}

int main()
{
    /* Let us create following BST
              50
           /     \
          30      70
         /  \    /  \
       20   40  60   80 */
    struct node *root = NULL;
    root = insert(root, 50);
    insert(root, 30);
    insert(root, 20);
    insert(root, 40);
    insert(root, 70);
    insert(root, 60);
    insert(root, 80);
  
    printf("Inorder traversal of the given tree \n");
    inorder_traversal(root);
 
    printf("\nDelete 20\n");
    root = deleteNode(root, 20);
    printf("Inorder traversal of the modified tree \n");
    inorder_traversal(root);
 
    printf("\nDelete 30\n");
    root = deleteNode(root, 30);
    printf("Inorder traversal of the modified tree \n");
    inorder_traversal(root);
 
    printf("\nDelete 60\n");
    root = deleteNode(root, 60);
    printf("Inorder traversal of the modified tree \n");
    inorder_traversal(root);
  
    return 0;
}


/*
Time Complexity: 
    The worst case time complexity of search and insert operations is O(h) where h is height of Binary Search Tree. 
    In worst case, we may have to travel from root to the deepest leaf node. 
	The height of a skewed tree may become n and the time complexity of search and insert operation may become O(n).
*/