Synchronize two threads, one prints even numbers and the other prints odd numbers.
Two solutions, with mutex and semaphores:

gcc evenodd.c -l pthread

There are many ways to do it, 
1. but the simplest one in c++ is using two semaphores. 
2. Other way is to use mutex and condition variables . 

#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

pthread_mutex_t even_mutex, odd_mutex;

void * mutex_even(void *args) {
   int i = 0;
   while (i < 10) {
      pthread_mutex_lock(&even_mutex);
      sleep(random()%3);
      printf("%d\n", i);
      i+=2;
      pthread_mutex_unlock(&odd_mutex);
    }
    pthread_exit(0);
}
 
void * mutex_odd(void *args) {
    int i = 1;
    while (i < 10) {
        pthread_mutex_lock(&odd_mutex);
        sleep(random()%4);
        printf("%d\n", i);
        i+=2;
        pthread_mutex_unlock(&even_mutex);
    }
    pthread_exit(0);
}

int main() {
     pthread_t thread[2];

     pthread_mutex_init(&even_mutex, NULL);
     pthread_mutex_init(&odd_mutex, NULL);
 
     printf("Solution mutexes:\n");
     pthread_create(&thread[0], NULL, mutex_even, NULL);
     pthread_create(&thread[1], NULL, mutex_odd, NULL);
     pthread_join(thread[0], NULL);
     pthread_join(thread[1], NULL);

     pthread_mutex_destroy(&even_mutex);
     pthread_mutex_destroy(&odd_mutex);
     return 0;
}
 
OUTPUT:-
Solution mutexes:                                                                                                       
0                                                                                                                       
1                                                                                                                       
3                                                                                                                       
2                                                                                                                       
4                                                                                                                       
5                                                                                                                       
6                                                                                                                       
7                                                                                                                       
9                                                                                                                       
8
-----------------------------
Using two semaphores :
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <semaphore.h>
#include <pthread.h>
 
sem_t even_lock, odd_lock;
int count = 0;
void * semaphore_even(void *args) {
   int i = 0;
   while (i++ <= 5) {
      sem_wait(&even_lock);
      sleep(random()%1);
      printf("semaphore_even : %d\n", count);
      count++;
      sem_post(&odd_lock);
    }
    pthread_exit(0);
}
 
void * semaphore_odd(void *args) {
    int i = 0;
    while (i++ < 5) {
        sem_wait(&odd_lock);
        sleep(random()%1);
        printf("semaphore_odd  : %d\n", count);
        count++;
        sem_post(&even_lock);
    }
    pthread_exit(0);
}
 
 
int main() {
     pthread_t thread[2];
     sem_init(&even_lock, 0, 1);
     sem_init(&odd_lock, 0, 0);
 
     printf("Solution semaphores:\n");
     pthread_create(&thread[0], NULL, semaphore_even, NULL);
     pthread_create(&thread[1], NULL, semaphore_odd, NULL);
     pthread_join(thread[0], NULL);
     pthread_join(thread[1], NULL);
 
     sem_destroy(&even_lock);
     sem_destroy(&odd_lock);
     return 0;
}
 
OUTPUT:-
Solution semaphores:                                                                                                    
semaphore_even : 0                                                                                                      
semaphore_odd  : 1                                                                                                      
semaphore_even : 2                                                                                                      
semaphore_odd  : 3                                                                                                      
semaphore_even : 4                                                                                                      
semaphore_odd  : 5                                                                                                      
semaphore_even : 6                                                                                                      
semaphore_odd  : 7                                                                                                      
semaphore_even : 8                                                                                                      
semaphore_odd  : 9                                                                                                      
semaphore_even : 10
-----------------------------
2. Using a mutex and a condition variable:

#include <iostream>
#include <pthread.h>
 
pthread_mutex_t mtx;
pthread_cond_t cond;
 
volatile bool isOdd = false;
 
void *PrintEven(void *args)
{
	for(int i=0;i<12;i+=2) {
		pthread_mutex_lock(&mtx);
		while(isOdd) {
			pthread_cond_wait(&cond1, &mtx);
		}
		std::cout<<i<<std::endl;
		isOdd = true;
		pthread_mutex_unlock(&mtx);
		pthread_cond_signal(&cond1);
	}
	return NULL;
}
 
void *PrintOdd(void *args)
{
	for(int i=1;i<13;i+=2) {
		pthread_mutex_lock(&mtx);
		while(!isOdd) {
			pthread_cond_wait(&cond1, &mtx);
		};
		std::cout<<i<<std::endl;
		isOdd = false;
		pthread_mutex_unlock(&mtx);
		pthread_cond_signal(&cond1);
	}
	return NULL;
}
 
int main()
{
	pthread_t t1, t2;
	pthread_mutex_init(&mtx, NULL);
	pthread_cond_init(&cond, NULL);
 
	pthread_create(&t1, NULL, &PrintOdd, NULL);
	pthread_create(&t2, NULL, &PrintEven, NULL);
 
	pthread_join(t1, NULL);
	pthread_join(t2, NULL);
 
	pthread_cond_destroy(&cond);
	pthread_mutex_destroy(&mtx);
 
	return 0;
}
OUTPUT:-
0                                                                                                                       
1                                                                                                                       
2                                                                                                                       
3                                                                                                                       
4                                                                                                                       
5                                                                                                                       
6                                                                                                                       
7                                                                                                                       
8                                                                                                                       
9                                                                                                                       
10                                                                                                                      
11

---------------------------
Synchronize two threads to print ordered even and odd numbers in C.
Problem:You have two threads, that independently print even and odd values. 
        The goal is to synchronize these threads so as to get an non-decreasing ordered set of numbers and order should preserve 
		natural ordering of numbers. So the output should be 1,2,3,4,5,6,7,8â€¦..

It is an interesting problem and could be solved with a conditional variable.
NOTE: Use condition variable to synchronize both threads and a mutex to protect count.

#include "stdio.h"
#include "stdlib.h"
#include "pthread.h"
#define COUNT_DONE 11

pthread_mutex_t count_mutex = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t condition_var = PTHREAD_COND_INITIALIZER;

int count = 0;

// Print odd numbers
void *PrintOddNumbers(void *args)
{
  for(;;) {
   // Lock mutex and then wait for signal to relase mutex
   pthread_mutex_lock( &count_mutex );
   if ( count % 2 != 0 ) {
     pthread_cond_wait( &condition_var, &count_mutex );
   }
   count++;
   printf("PrintOddNumbers  : %d\n",count);
   pthread_cond_signal( &condition_var );
   if ( count >= COUNT_DONE ) {
     pthread_mutex_unlock( &count_mutex );
     return(NULL);
   }
   pthread_mutex_unlock( &count_mutex );
 }
}

// print even numbers
void *PrintEvenNumbers(void *args)
{
  for(;;) {
  // Lock mutex and then wait for signal to relase mutex
  pthread_mutex_lock( &count_mutex );
  if ( count % 2 == 0 ) {
    pthread_cond_wait( &condition_var, &count_mutex );
  }
  count++;
  printf("PrintEvenNumbers : %d\n",count);
  pthread_cond_signal( &condition_var );
  if( count >= COUNT_DONE ) {
    pthread_mutex_unlock( &count_mutex );
    return(NULL);
  }
  pthread_mutex_unlock( &count_mutex );
 }
}

int main()
{
 pthread_t thread1, thread2;
 
 pthread_create( &thread1, NULL, &PrintOddNumbers, NULL);
 pthread_create( &thread2, NULL, &PrintEvenNumbers, NULL);
 
 pthread_join( thread1, NULL);
 pthread_join( thread2, NULL);
 return 0;;
}

OUTPUT:-
PrintOddNumbers  : 1                                                                                                    
PrintEvenNumbers : 2                                                                                                    
PrintOddNumbers  : 3                                                                                                    
PrintEvenNumbers : 4                                                                                                    
PrintOddNumbers  : 5                                                                                                    
PrintEvenNumbers : 6                                                                                                    
PrintOddNumbers  : 7                                                                                                    
PrintEvenNumbers : 8                                                                                                    
PrintOddNumbers  : 9                                                                                                    
PrintEvenNumbers : 10                                                                                                   
PrintOddNumbers  : 11                                                                                                   
PrintEvenNumbers : 12

----------------------------------
print odd and even numbers using 2 threads using mutex in C:-
i think use of signal variable in necessary , from scheduler point of view , scheduler try to give 50-50 % weight to parallel running thread , 
but there is no guarantee , what if thread 2nd start little bit late because of scheduler , this program may miss some count , 
although its a hypothetical scenario , not sure about it.

#include<stdio.h>
#include<pthread.h>
#define MAX_COUNT 10

pthread_t tid[2];
unsigned int shared_data = 0;
pthread_mutex_t mutex;
unsigned int rc;
//prototypes for callback functions

void* PrintEvenNos(void*);
void* PrintOddNos(void*);


void* PrintEvenNos(void *ptr)
{
    rc = pthread_mutex_lock(&mutex);
    do
    {
       if(shared_data%2 == 0)
       {
         printf("Even :%d\n",shared_data);
         shared_data++;
       } else {
          rc=pthread_mutex_unlock(&mutex);//if number is odd, do not print, release mutex
       }
    } while(shared_data <= MAX_COUNT);
}

void* PrintOddNos(void* ptr)
{
    rc = pthread_mutex_lock(&mutex);
    do
    {
       if(shared_data%2 != 0)
       {
          printf("Odd  :%d\n",shared_data);
          shared_data++;
       } else {
          rc = pthread_mutex_unlock(&mutex);//if number is even, do not print, release mutex
       }
    } while(shared_data <= MAX_COUNT);
}

int main(void)
{
    pthread_create(&tid[0],0,&PrintEvenNos,0);
    pthread_create(&tid[1],0,&PrintOddNos,0);

    pthread_join(tid[0],NULL);
    pthread_join(tid[1],NULL);

    return 0;
}

OUTPUT:-
Even :0                                                                                                                 
Odd  :1                                                                                                                 
Even :2                                                                                                                 
Odd  :3                                                                                                                 
Even :4                                                                                                                 
Odd  :5                                                                                                                 
Even :6                                                                                                                 
Odd  :7                                                                                                                 
Even :8                                                                                                                 
Odd  :9                                                                                                                 
Even :10
